<?php
// $Id: tapas_transform.module

/**
 * @file
 * Custom functions for TAPAS Transformations
 */

function tapas_transform_recursiveDelete($str){
  if(is_file($str)){
            return @unlink($str);
        }
        if(is_dir($str)){
            $scan = glob(rtrim($str,'/').'/*');
            foreach($scan as $index=>$path){
                tapas_transform_recursiveDelete($path);
            }
            return @rmdir($str);
        }
  }


//ADDED for multistep.module from http://drupal.org/node/1419120#comment-6619164 in regards to http://drupal.org/node/1419120
//ADDED also to specify redirects on multistep forms
function tapas_transform_form_cancel($form, &$form_state) {
        $the_url = request_uri();
        drupal_goto($the_url);

}

function tapas_transform_form_alter(&$form, &$form_state, $form_id)
{
if(!empty($form['#multistep'])){
switch($form['#multistep']['current']):
			//BEGIN PROJECT CONTENT TYPE MULTISTEP RULES
			case 'group_set_title':
				unset($form['field_page_elements']);
				unset($form['field_project_logo_upload']);
				unset($form['field_email_yet']);
			break;
			case 'group_project_creation':
				unset($form['field_email_yet']);
			break;
			case 'group_new_collection_created':
				unset($form['field_page_elements']);
				unset($form['field_project_logo_upload']);
				unset($form['field_email_yet']);
				$project_url = $form['#node']->field_url['und'][0]['value'];
				$is_old = $form['#node']->field_email_yet['und'][0]['value'];
				if($is_old==1){
					drupal_goto($path = $project_url);
				}
			break;
			case 'group_redirect_to_collection':
				unset($form['field_page_elements']);
				unset($form['field_project_logo_upload']);

				$project_title = $form['#node']->title;
				$project_url = $form['#node']->field_url['und'][0]['value'];
				$is_old = $form['#node']->field_email_yet['und'][0]['value'];
				if($is_old==0){
					//hook into drupal
					require_once './includes/bootstrap.inc';
					drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
					$node = menu_get_object();
					$node->field_email_yet['und'][0]['value']=1;
					$node->revision = 0;
					$node->revision_operation = 0;
					node_save($node);
					$destination = $project_url . "/" . $project_title . "collection/edit";
					_multistep_update_status($node->nid, 'submitted');
					$_SESSION['redirect_new_collection_to_project_ugh']=$project_url;
					drupal_goto($path = $destination);
				}else{
					drupal_goto($path = $project_url);
				}
			break;
			//END PROJECT CONTENT TYPE MULTISTEP RULES
			//BEGIN COLLECTION CONTENT TYPE MULTISTEP RULES
			case 'group_edit_collection_properties':
			unset($form['field_email_yet']);
			break;
			case 'group_finalize_collection':
			unset($form['field_title']);
			unset($form['field_collection_url']);
			unset($form['og_group_ref']);
			unset($form['group_content_access']);
			unset($form['field_collection_page_elements']);
			unset($form['field_project_logo_upload']);
			unset($form['field_collection_term_main']);
			unset($form['field_collection_term']);
			unset($form['field_site_collection_vocab_term']);
			unset($form['field_projects_vocab']);
			$node = menu_get_object();$the_url = request_uri();
			$the_url1 = explode('/',$the_url);
			$project_url=$the_url1[1];
			$collection_url=$the_url1[1]."/".$the_url1[2];
			if(isset($_SESSION['redirect_new_collection_to_project_ugh'])){
				$node->status=1;
				_multistep_update_status($node->nid, 'submitted');
				$the_url=$project_url;
				$_SESSION['redirect_new_collection_to_project_ugh']=NULL;
			}else{
				_multistep_update_status($node->nid, 'submitted');
				$the_url=$collection_url;
			}
			drupal_goto($path = $the_url);
			break;
			//END COLLECTION CONTENT TYPE MULTISTEP RULES
			//BEGIN TEI CONTENT TYPE MULTISTEP RULES
			case 'group_select_collections':
				unset($form['field_is_new']);
				unset($form['field_email_yet']);
				unset($form['field-rights-certification']);
				unset($form['field-rights-granted-cc']);
				unset($form['field_dc_coverage_temporal']);
				unset($form['field_title']);
				unset($form['field_dc_contributor']);
				unset($form['field_dc_coverage_spatial_taxono']);
				unset($form['field_dc_coverage_spatial']);
				unset($form['field_dc_coveragetemporal_partia']);
				unset($form['field_has_corporate_author']);
				unset($form['field_author_corporate_dc_creato']);
				unset($form['field__author_last_name_dc_creat']);
				unset($form['field_author_first_name_dc_creat']);
				unset($form['field_dc_creator']);
				unset($form['field_dc_date']);
				unset($form['field_dc_description']);
				unset($form['field_dc_format']);
				unset($form['field_dc_identifier']);
				unset($form['field_dc_language']);
				unset($form['field_dc_publisher']);
				unset($form['field_dc_relation']);
				unset($form['field_dc_rights']);
				unset($form['field_dc_source']);
				unset($form['field_dc_subject_lcsh']);
				unset($form['field_dc_subject']);
				unset($form['field_dc_title']);
				unset($form['field_dc_alternative']);
				unset($form['field_dc_type']);
				unset($form['field_location']);		
				unset($form['field_geodata']);	
				unset($form['field_tei_xml']);
			break;
			case 'group_upload_tei':
				unset($form['field_is_new']);
				unset($form['field_email_yet']);
				unset($form['field-rights-certification']);
				unset($form['field-rights-granted-cc']);
				unset($form['field_dc_coverage_temporal']);
				unset($form['field_title']);
				unset($form['field_dc_contributor']);
				unset($form['field_dc_coverage_spatial_taxono']);
				unset($form['field_dc_coverage_spatial']);
				unset($form['field_dc_coveragetemporal_partia']);
				unset($form['field_has_corporate_author']);
				unset($form['field_author_corporate_dc_creato']);
				unset($form['field__author_last_name_dc_creat']);
				unset($form['field_author_first_name_dc_creat']);
				unset($form['field_dc_creator']);
				unset($form['field_dc_date']);
				unset($form['field_dc_description']);
				unset($form['field_dc_format']);
				unset($form['field_dc_identifier']);
				unset($form['field_dc_language']);
				unset($form['field_dc_publisher']);
				unset($form['field_dc_relation']);
				unset($form['field_dc_rights']);
				unset($form['field_dc_source']);
				unset($form['field_dc_subject_lcsh']);
				unset($form['field_dc_subject']);
				unset($form['field_dc_title']);
				unset($form['field_dc_alternative']);
				unset($form['field_dc_type']);
				unset($form['field_location']);		
				unset($form['field_geodata']);
			break;
			case 'group_enter_metadata':
				unset($form['field_tei_xml']);
				unset($form['field_collection_term']);
				unset($form['og_group_ref']);
				$form['#node']->field_extract_metadata['und'][0]['value']=0;
				unset($form['field_is_new']);
				unset($form['field_email_yet']);
			break;
			case 'group_finalize_tei':
				unset($form['field_tei_xml']);
				unset($form['field_collection_term']);
				unset($form['og_group_ref']);
				unset($form['field_dc_date']);
				unset($form['field-rights-certification']);
				unset($form['field-rights-granted-cc']);
				require_once './includes/bootstrap.inc';
				drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
				$node = menu_get_object();
				$nid = $node->nid;
				$is_new_value = $form['#node']->field_is_new['und'][0]['value'];
				if($is_new_value==0){
					$node->field_is_new['und'][0]['value']=1;
					$node->revision = 0;
					$node->revision_operation = 0;
					$collection_status=node_load($node->field_collection_node_reference['und'][0]['target_id']);
					$node->status = $collection_status->status;
					$node->field_extract_metadata['und'][0]['value']=0;
					node_save($node);
				}
				_multistep_update_status($nid, 'submitted');
				drupal_goto($path = 'node/'.$nid);
			break;
			default:
				unset($form['field_tei_xml']);
				unset($form['field_collection_term']);
				unset($form['og_group_ref']);
				unset($form['field_dc_date']);
				unset($form['field-rights-certification']);
				unset($form['field-rights-granted-cc']);
			//END TEI CONTENT TYPE MULTISTEP RULES
		endswitch;
}
 // }
}
//END

/**
* Implementation of hook_node_submit().
*/
function tapas_transform_node_submit($node){
  if ($node->type == 'tei_content') {
	  if(isset($node->field_is_new)){
	  	$has_new = $node->field_is_new['und'][0]['value'];
	  }else{
		  $has_new=0;
	  }
	  if($has_new==0){
		  $node->revision = 0;
	  	  $node->revision_operation = 0;
	  }
	  $node->	field_email_yet['und'][0]['value'] = 0;
	  node_save($node);
	  $node->revision = 0;
	  $node->revision_operation = 0;
	  tapas_file_revisions($node);
	  tapas_transform($node);
  }
  if ($node->type == 'collection') {
	  $node->	field_email_yet['und'][0]['value'] = 0;
  }
}


/**
* Implementation of hook_file_update()
* Hook function copied from upload_replace module - http://drupal.org/project/upload_replace. Since using context to do file revisions, easier to maintain code here.
*/
function tapas_transform_file_update($new_file) {

  if (!$new_file->fid) {
    //Nothing to do if no fileid
    return;
  }
  $file_is_new=0;
  if(strpos($new_file->uri,'Create TEI Content Record')){
	  $file_is_new=1;
  }
  $desired_destination = preg_replace('/_[0-9]+\.(.*)$/', '.$1', $new_file->uri);
  context_delete('file_updating', 'desired_destination');
  context_set('file_updating', 'desired_destination', $desired_destination);
  
  $db_path = db_select('file_managed', 'f')
    ->fields('f', array('uri', ))
    ->condition('fid', $new_file->fid)
    ->execute()
    ->fetchField();
  if ($db_path != $new_file->uri) {
    //this happens when a reversion is being reverted
    $next_good_filepath = file_destination($desired_destination, FILE_EXISTS_RENAME);
    db_update('file_managed')
      ->fields(array('uri' => $next_good_filepath))
      ->condition('fid', $new_file->fid)
      ->execute();
    $new_file->uri = $desired_destination;
  } else {
    //If the filename has be modified by adding a _0 value, or
    //on certain situations the filepath will not match the filepath in the db, such as
    //when reverting a revision.  When reverting a revision change the filename as well
    if (!strpos($new_file->uri, $new_file->uri)) {
      //the filename is not in the filepath, so drupal must have added a "_0" before the extension
      //find the file that is blocking this file from keeping the correct path
      $result = db_select('file_managed', 'f')
        ->fields('f')
        ->condition('uri', $desired_destination)
        ->execute();
      //@todo only one result is handled, should allow for multiple results
      $is_blocked = false;
      
      foreach ($result as $file) {
        $is_blocked = TRUE;
        $blocking_file = $file;
        $tmp_destination = file_directory_temp()."/test_-".$blocking_file->fid."_-".$blocking_file->filename."";
		context_delete('we_r_done', 'fid', $blocking_file->fid);
      }
//		if($file_is_new && $is_blocked){exit("testing");};
      $old_destination = $db_path;

      if ($old_destination == $desired_destination){
        return;
      }
      //Swap the files
      if ($is_blocked) {
        //move the blocking file to a temporary location
        if (!file_unmanaged_move($desired_destination, $tmp_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $desired_destination, '%new' => $tmp_destination)), 'error');
          return;
        }
        //DRUPAL 7 no longer changes the source filepath during move
        //move blocking file was successful, update the DB
        db_update('file_managed')
          ->fields(array('uri' => $tmp_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }
//NEW FILE IS _0 here. OLD FILE IS IN TMP DIR

      //move the newfile to the prefered location
      if (!file_unmanaged_move($old_destination, $desired_destination)) {
        drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $old_destination, '%new' => $desired_destination)), 'error');
        return;
      }
      //move newfile was successful, update the DB
      db_update('file_managed')
        ->fields(array('uri' => $desired_destination))
        ->condition('fid', $new_file->fid)
        ->execute();
//NEW FILE IS IN PLACE. OLD FILE IS IN TMP DIR WITHOUT A _0
      $new_file->uri = $desired_destination;//set the newfile's path to the correct path

      if ($is_blocked) {
        //move the older file from temp to the new _0 location
        if (!file_unmanaged_move($tmp_destination, $old_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $tmp_destination, '%new' => $old_destination)), 'error');
          return;
        }
//NEW AND OLD FILES ARE NOW IN PLACE. DB UPDATE FOR OLD FILE NEEDED
        //move blocking file was successful, update the DB with the actual location after file copy, so we use tmp_destination as it was updated during the move
        db_update('file_managed')
          ->fields(array('uri' => $old_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }
	}
	//This is added to upload_replace
	$desired_destination_path=pathinfo($desired_destination);
	$desired_destination_path_extension=$desired_destination_path['extension'];
	if($old_destination_path=pathinfo($old_destination)){
	  $old_destination_path_extension=$old_destination_path['extension'];
	  if ($desired_destination_path_extension == 'xml' || $desired_destination_path_extension == 'tei' && $old_destination_path_extension == 'xml' || $old_destination_path_extension == 'tei'){
		  context_set('new_xml_uri', 'new_xml', $desired_destination);
		  context_set('old_xml_uri', 'old_xml', $old_destination);
	  }
	  if ($desired_destination_path_extension == 'xsl' || $desired_destination_path_extension == 'xslt' && $old_destination_path_extension == 'xsl' || $old_destination_path_extension == 'xslt'){
		  context_set('new_xsl_uri', 'new_xsl', $desired_destination);
		  context_set('old_xsl_uri', 'old_xsl', $old_destination);
	  }
	}
  }
//ALL IS WELL AT THIS POINT. SOMETHING BAD HAPPENS BETWEEN HERE AND tapas_file_revisions so need to set a context used in includes/file.inc. Not pleased about this at all.
if(!$file_is_new){
	context_set('we_r_done', 'fid', $blocking_file->fid);
}
}

//Main Transform function
function tapas_transform($node) {
 $xmlfile= field_get_items('node', $node, 'field_tei_xml');
 if($xmlfile){
	//get drupal paths
	$base = base_path();
	$files = conf_path() .  "/files/";
	
	//get directory from OG
	if(og_context($node)){
	$id=$node->nid;
	$newprjctdirname=og_context($node);
	$newprjctdirname=$newprjctdirname['gid'];
	$newprjctdirname = node_load($newprjctdirname);
	$newprjctdirname = $newprjctdirname->title;
	$newdirname = "projects/" . $newprjctdirname . "/".$id. "/";
	}else{
		drupal_set_message(t('<em class="placeholder">Warning</em>: TAPAS module could not get og_context yet again!'), 'error');
		return;
	}
	
	//Get the xml filename to create unique directories and transformations
	$xmlfilename= $xmlfile[0]['filename'];
	$xmlurl= $xmlfile[0]['uri'];
	$xmlurl = str_replace("public://", "", $xmlurl);
	$xmlurl= "." . $base . $files . $xmlurl;
	//Save the file to a link field 
	$node->	field_tei_xml_link['und'][0]['url'] = $xmlurl;
	$node->	field_tei_xml_link['und'][0]['title'] = $xmlfilename;

//NOTE TO SELF - THIS NEEDS TO BE SPLIT INTO SEPARATE SUBFUNCTION WITH ARGS NOW THAT WE HAVE MULTIPLE!!!!
	//create transform
	$tapas_xslurl1="sites/default/files/transforms/teibp/";
	$tapas_xslfilename1="teibp.xsl";
	$tapas_xslurl1=$tapas_xslurl1 . $tapas_xslfilename1;
	//create transform filename
	$filename = $xmlfilename . "-" . $tapas_xslfilename1;
	$dirtosave = $files . $newdirname;
	$finalfile = $dirtosave . $filename . ".xml";
	//Make the transform and save to the tmp directory
	$xslDoc = new DOMDocument();
	$xslDoc->resolveExternals = TRUE;
	$xslDoc->substituteEntities = TRUE;
	$xslDoc->load($tapas_xslurl1);
	$xmlDoc = new DOMDocument();
	$xmlDoc->load($xmlurl);
	$proc = new XSLTProcessor();
	$proc->importStylesheet($xslDoc);
	$doc = new DOMDocument();
	$doc->loadXML($proc->transformToXML($xmlDoc));
	//save the file
	$finalfile_tmp=file_directory_temp(). "/" . $filename . ".xml";
	$doc->save($finalfile_tmp);
	rename($finalfile_tmp, $finalfile);
	//Save the final path address to drupal field 
	$node->field_transform_address_link['und'][0]['url'] = $finalfile;
	$node->field_transform_address_link['und'][0]['title'] = $filename . '.xml';
	
//NEW STUFF HERE
	//create transform
	$tapas_xslurl3="sites/default/files/transforms/tapas/";
	$tapas_xslfilename3="in2tfc_step1.xsl";
	$tapas_xslurl3=$tapas_xslurl3 . $tapas_xslfilename3;
	//create transform filename
	$filename = $xmlfilename . "-" . $tapas_xslfilename3;
	$dirtosave = $files . $newdirname;
	$finalfile = $dirtosave . $filename . ".xml";
	//Make the transform and save to the tmp directory
	$xslDoc = new DOMDocument();
	$xslDoc->resolveExternals = TRUE;
	$xslDoc->substituteEntities = TRUE;
	$xslDoc->load($tapas_xslurl3);
	$xmlDoc = new DOMDocument();
	$xmlDoc->load($xmlurl);
	$proc = new XSLTProcessor();
	$proc->importStylesheet($xslDoc);
	$doc = new DOMDocument();
	$doc->loadXML($proc->transformToXML($xmlDoc));
	//save the file
	$finalfile_tmp=file_directory_temp(). "/" . $filename . ".xml";
	$doc->save($finalfile_tmp);
	rename($finalfile_tmp, $finalfile);
	//Save the final path address to drupal field 
	$node->	field_tei_tranform_link_in2tfc_s['und'][0]['url'] = $finalfile;
	$node->	field_tei_tranform_link_in2tfc_s['und'][0]['title'] = $filename . '.xml';
//END NEW STUFF
	
	//create transform
	$tapas_xslurl="sites/default/files/transforms/tapas/";
	$tapas_xslfilename="genericTEI2XHTML4noJS.xsl";
	$tapas_xslurl=$tapas_xslurl . $tapas_xslfilename;
	//create transform filename
	$filename = $xmlfilename . "-" . $tapas_xslfilename;
	$dirtosave = $files . $newdirname;
	$finalfile = $dirtosave . $filename . ".xml";
	//Make the transform and save to the tmp directory
	$xslDoc = new DOMDocument();
	$xslDoc->resolveExternals = TRUE;
	$xslDoc->substituteEntities = TRUE;
	$xslDoc->load($tapas_xslurl);
	$xmlDoc = new DOMDocument();
	$xmlDoc->load($xmlurl);
	$proc = new XSLTProcessor();
	$proc->importStylesheet($xslDoc);
	$doc = new DOMDocument();
	$doc->loadXML($proc->transformToXML($xmlDoc));
	//save the file
	$finalfile_tmp=file_directory_temp(). "/" . $filename . ".xml";
	$doc->save($finalfile_tmp);
	rename($finalfile_tmp, $finalfile);
	//Save the final path address to drupal field 
	$node->	field_tei_custom_transform_addre['und'][0]['url'] = $finalfile;
	$node->	field_tei_custom_transform_addre['und'][0]['title'] = $filename . '.xml';
	//create transform
	$tapas_xslurl2="sites/default/files/transforms/tapas/";
	$tapas_xslfilename2="teiHeader2dc1.xsl";
	$tapas_xslurl2=$tapas_xslurl2 . $tapas_xslfilename2;
	//create transform filename
	$filename = $xmlfilename . "-" . $tapas_xslfilename2;
	$dirtosave = $files . $newdirname;
	$finalfile = $dirtosave . $filename . ".xml";
	//Make the transform and save to the tmp directory
	$xslDoc = new DOMDocument();
	$xslDoc->resolveExternals = TRUE;
	$xslDoc->substituteEntities = TRUE;
	$xslDoc->load($tapas_xslurl2);
	$xmlDoc = new DOMDocument();
	$xmlDoc->load($xmlurl);
	$proc = new XSLTProcessor();
	$proc->importStylesheet($xslDoc);
	$doc = new DOMDocument();
	$doc->loadXML($proc->transformToXML($xmlDoc));
	//save the file
	$finalfile_tmp=file_directory_temp(). "/" . $filename . ".xml";
	$doc->save($finalfile_tmp);
	rename($finalfile_tmp, $finalfile);
	$is_new=0;
if(!isset($node->field_dc_title)){
$is_new=1;
}

	//Save the final path address to drupal field 
	$node->field_tei_transform_address_link['und'][0]['url'] = $finalfile;
	$node->field_tei_transform_address_link['und'][0]['title'] = $filename . '.xml';

	if($is_new!=1){
		$node->	field_email_yet['und'][0]['value'] = 1;
	}

	if($node->field_extract_metadata['und'][0]['value']==1){
		tapas_set_metadata($node, $finalfile);
	}

	$node->revision = 0;
	$node->revision_operation = 0;
	node_save($node);

 }
}

function tapas_reset_metadata($node){
		$node->field_author_first_name_dc_creat = NULL;
		$node->field_author_last_name_dc_creat = NULL;
		$node->field_author = NULL;
		$node->field_author_taxonomy = NULL;
		$node->field_dc_creator = NULL;
		$node->field_language_dc_language = NULL;
		$node->field_dc_contributor = NULL;
}

function tapas_set_metadata($node, $finalfile) {

$xml = simplexml_load_file($finalfile);
tapas_reset_metadata($node);
//Set Title
$title = $xml->xpath("dc:title");
$title = (string) $title[0];
if ($title){
	if (strlen ($title)>255){
		$title = substr($title,0,252).'...';
	}
	$node->field_dc_title['und'][0]['value'] = $title;
} else {
	$node->field_dc_title['und'][0]['value'] = "Please give your TEI file a valid title and reupload the file.";
}

//Set Rights
$rights = $xml->xpath("dc:rights");
$rights = (string) $rights[0];
if ($rights){
	$node->field_dc_rights['und'][0]['value'] = $rights;
}

//Set Source
$source = $xml->xpath("dc:source");
$source = (string) $source[0];
if ($source){
	$node->	field_dc_source_full_text['und'][0]['value'] = $source;
}

//Set Language
$language = $xml->xpath("dc:language");
if(isset($language[0])){
	$language = (string) $language[0];
	$language = substr($language,0,3);
	if(!preg_match('/[a-z][a-z][a-z]/', $language)){
		$language = substr($language,0,2);
	}
	$node->field_dc_language_text_field['und'][0]['value'] = $language;
}

//Set Publish Date
$date = $xml->xpath("dc:date");
if(isset($date[0])){
	$date = (string) $date[0];
	$date=explode("-",$date);
	$year=$date[0];
	if(isset($date[1])){$month=$date[1];};
	if(isset($date[2])){$day=$date[2];};
	if(!isset($month)){
		$month="01";
	}
	if(!isset($day)){
		$day="01";
	}
	$date=$year."-".$month."-".$day." 00:00:00";
	if(preg_match('/[0-9][0-9][0-9][0-9]/', $year)){
	$node->field_dc_date['und'][0]['value'] = $date;
	}else{
		drupal_set_message(t('The publication date in your TEI file could not be properly extracted'),'error');
	}
}

//Set Contributors
$contributor = $xml->xpath("dc:contributor");
if(isset($contributor)){
$i=0;
foreach($contributor as $value){
	$node->field_dc_contributor['und'][$i]['value'] = $value;
	$i++;
}
}

//Set Author/Creator NOTE: I am sure there is a more efficient way to accomplish this (multiple functions at the least)...and this may not even cover every way someone enters an author name. sigh.
$creator_full = $xml->xpath("dc:creator");
if(isset($creator_full)){
	$i=0;
	$creator = '';
	foreach($creator_full as $value){
		$creator = (string) $value[$i];
		if($creator!=''){
			$creator_first_name='';
			$creator_last_name='';
			$creator_middle_name='';
			$creator_generational='';
			$creator_title='';
			if(strpos($creator,' and ')){
				$creator_parse=$creator;
				$creator_parse=explode(" and ",$creator_parse);
				$j=0;
				foreach($creator_parse as $creator){
					if(strpos($creator,',')){
						$creator=explode(", ",$creator);
						$creator_last_name = array_shift($creator);
						$creator = $creator[0];
						$creator=explode(" ",$creator);
						$creator_first_name=array_shift($creator);
						if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
							$creator_title=array_shift($creator);
							$creator_first_name=array_shift($creator);
						}
						foreach($creator as $value){
							if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
								$creator_generational=$value;
							}else{
								$creator_middle_name=$creator_middle_name.$value." ";
							}
						}
					}else{
						$creator=explode(" ",$creator);
						$name_count=count($creator);
						if($name_count!=2){
							$creator_last_name = array_pop($creator);
							$creator_first_name=array_shift($creator);
							if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
								$creator_title=array_shift($creator);
								$creator_first_name=array_shift($creator);
							}
							foreach($creator as $value){
								if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
									$creator_generational=$value;
								}else{
									$creator_middle_name=$creator_middle_name.$value." ";
								}
							}
						}else{
							$creator_first_name=$creator[0];
							$creator_last_name=$creator[1];
						}
					}
					if(isset($creator_title) && $creator_title!=''){
						$node->field_author['und'][$j]['title'] = $creator_title;
					}
					if(isset($creator_first_name) && $creator_first_name!=''){
						$node->field_author['und'][$j]['given'] = $creator_first_name;
					}
					if(isset($creator_last_name) && $creator_last_name!=''){
						$node->field_author['und'][$j]['family'] = $creator_last_name;
					}
					if(isset($creator_middle_name) && $creator_middle_name!=''){
						$node->field_author['und'][$j]['middle'] = $creator_middle_name;
					}
					if(isset($creator_generational) && $creator_generational!=''){
						$node->field_author['und'][$j]['generational'] = $creator_generational;
					}
					$j++;
				}
			}else{
				if(strpos($creator,',')){
					$creator=explode(", ",$creator);
					$creator_last_name = array_shift($creator);
					$creator = $creator[0];
					$creator=explode(" ",$creator);
					$creator_first_name=array_shift($creator);
					if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
						$creator_title=array_shift($creator);
						$creator_first_name=array_shift($creator);
					}
					foreach($creator as $value){
						if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
							$creator_generational=$value;
						}else{
							$creator_middle_name=$creator_middle_name.$value." ";
						}
					}
				}else{
					$creator=explode(" ",$creator);
					$name_count=count($creator);
					if($name_count!=2){
						$creator_last_name = array_pop($creator);
						$creator_first_name=array_shift($creator);
						if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
							$creator_title=array_shift($creator);
							$creator_first_name=array_shift($creator);
						}
						foreach($creator as $value){
							if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
								$creator_generational=$value;
							}else{
								$creator_middle_name=$creator_middle_name.$value." ";
							}
						}
					}else{
						$creator_first_name=$creator[0];
						$creator_last_name=$creator[1];
					}
				}
				if(isset($creator_title) && $creator_title!=''){
					$node->field_author['und'][$i]['title'] = $creator_title;
				}
				if(isset($creator_first_name) && $creator_first_name!=''){
					$node->field_author['und'][$i]['given'] = $creator_first_name;
				}
				if(isset($creator_last_name) && $creator_last_name!=''){
					$node->field_author['und'][$i]['family'] = $creator_last_name;
				}
				if(isset($creator_middle_name) && $creator_middle_name!=''){
					$node->field_author['und'][$i]['middle'] = $creator_middle_name;
				}
				if(isset($creator_generational) && $creator_generational!=''){
					$node->field_author['und'][$i]['generational'] = $creator_generational;
				}
			}
		}
		$i++;
	}
}
}

function tapas_file_revisions($node) {
	if (context_isset('new_xml_uri', 'new_xml') && context_isset('old_xml_uri', 'old_xml')){
	  $xml_context_new = context_get('new_xml_uri', 'new_xml');
	  $xml_context_archive = context_get('old_xml_uri', 'old_xml');
	  //get drupal paths
	  $files = conf_path() .  "/files/";
	  $xml_context_archive_url = str_replace("public://", "", $xml_context_archive);
	  $xml_context_archive_url= $files . $xml_context_archive_url;
	  $xml_context_new_url = str_replace("public://", "", $xml_context_new);
	  $xml_context_new_url= $files . $xml_context_new_url;
	  //Check for previous filepaths in drupal array
	  $tei_xml_revisions_link = field_get_items('node', $node, 'field_tei_xml_revisions_link');
	  $numofteixmlrevfilepathlinks=count($tei_xml_revisions_link);
	  if(!$tei_xml_revisions_link){
		  $numofteixmlrevfilepathlinks="0";
	  }
	  $numofteixmlrevs=$numofteixmlrevfilepathlinks + 1;
	  //Get the filepath for title
	  $xml_context_archive_path=pathinfo($xml_context_archive_url);
	  $xml_context_archive_filename=$xml_context_archive_path['basename'];
	  $node->field_tei_xml_revisions_link['und'][$numofteixmlrevfilepathlinks]['url'] = $xml_context_archive_url;
	  $node->field_tei_xml_revisions_link['und'][$numofteixmlrevfilepathlinks]['title'] = " Revison " . $numofteixmlrevs . " - " . $xml_context_archive_filename;
	}
	if (context_isset('new_xsl_uri', 'new_xsl') && context_isset('old_xsl_uri', 'old_xsl')){
	  $xsl_context_new = context_get('new_xsl_uri', 'new_xsl');
	  $xsl_context_archive = context_get('old_xsl_uri', 'old_xsl');
	  $files = conf_path() .  "/files/";
	  $xsl_context_archive_url = str_replace("public://", "", $xsl_context_archive);
	  $xsl_context_archive_url= $base . $files . $xsl_context_archive_url;
	  $xsl_context_new_url = str_replace("public://", "", $xsl_context_new);
	  $xsl_context_new_url= $base . $files . $xsl_context_new_url;
	  $new_xsl_contents=file_get_contents("./" . $xsl_context_new_url);
	  //Check for previous filepaths in drupal array
	  $tei_xsl_revisions_link = field_get_items('node', $node, 'field_tei_xsl_revisions_link');
	  $numofteixslrevfilepathlinks=count($tei_xsl_revisions_link);
	  if(!$tei_xsl_revisions_link){
		$numofteixslrevfilepathlinks="0";
	  }
	  $numofteixslrevs=$numofteixslrevfilepathlinks + 1;
	  //Get the filepath for title
	  $xsl_context_archive_path=pathinfo($xsl_context_archive_url);
	  $xsl_context_archive_filename=$xsl_context_archive_path[basename];
	  $node->field_tei_xsl_revisions_link['und'][$numofteixslrevfilepathlinks]['url'] = $xsl_context_archive_url;
	  $node->field_tei_xsl_revisions_link['und'][$numofteixslrevfilepathlinks]['title'] = $xsl_context_archive_filename . " Revison " . $numofteixslrevs;
	}

}
