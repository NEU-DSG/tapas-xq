<?php
// $Id: tapas_transform.module

/**
 * @file
 * Custom functions for TAPAS Transformations
 */

function tapas_transform_recursiveDelete($str) {
  if(is_file($str)){
    return @unlink($str);
  }
  if(is_dir($str)){
    $scan = glob(rtrim($str,'/').'/*');
    foreach($scan as $index=>$path){
      tapas_transform_recursiveDelete($path);
    }
    return @rmdir($str);
  }
}

function tapas_transform_form_cancel($form, &$form_state) {
  $the_url = request_uri();
  drupal_goto($the_url);
}

//ADDED for multistep.module from http://drupal.org/node/1419120#comment-6619164 in regards to http://drupal.org/node/1419120 - EXPLAINS NEED FOR unset()'s.
//ADDED also to specify redirects on multistep forms
function tapas_transform_form_alter(&$form, &$form_state, $form_id) {
  //BEGIN BULK UPLOAD SETTINGS
  if($form_id=="tei_bulk_upload_node_form"){
    if(isset($_SESSION['batch_remove'])){
      if($_SESSION['batch_remove']=='process started'){
        unset($_SESSION['batch_remove']);
        //drupal_set_message('batch unset');
      }else{
        drupal_set_message('<h3>It appears you have a TEI Bulk Upload in progress. Please wait until it is complete before editing or creating other TEI content.</h3><br/><br/><br/>', 'error');
        $message="Batch process ".$_SESSION['batch_remove']." still in process.";
        drupal_set_message($message, 'error');
      }
//      drupal_goto($_SERVER['HTTP_REFERER']);
    }
    $_SESSION['batch_remove']='process started';
  }
  if(!empty($form['#multistep'])){
    switch($form['#multistep']['current']):

      //BEGIN PROJECT CONTENT TYPE MULTISTEP RULES
      case 'group_set_title':
        unset($form['field_page_elements']);
        unset($form['field_project_logo_upload']);
        unset($form['field_email_yet']);
      break;
      case 'group_project_creation':
        unset($form['field_email_yet']);
      break;
      case 'group_new_collection_created':
        unset($form['field_page_elements']);
        unset($form['field_project_logo_upload']);
        unset($form['field_email_yet']);
        $project_url = $form['#node']->field_url['und'][0]['value'];
        $is_old = $form['#node']->field_email_yet['und'][0]['value'];
        if($is_old==1){
          drupal_goto($path = $project_url);
        }
      break;
      case 'group_redirect_to_collection':
        unset($form['field_page_elements']);
        unset($form['field_project_logo_upload']);
        $project_title = $form['#node']->title;
        $project_url = $form['#node']->field_url['und'][0]['value'];
        $is_old = $form['#node']->field_email_yet['und'][0]['value'];
        if($is_old==0){
          //hook into drupal
          require_once './includes/bootstrap.inc';
          drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
          $node = menu_get_object();
          $node->field_email_yet['und'][0]['value']=1;
          $node->revision = 0;
          $node->revision_operation = 0;
          node_save($node);
          $destination = $project_url . "/" . $project_title . "collection/edit";
          _multistep_update_status($node->nid, 'submitted');
          $_SESSION['redirect_new_collection_to_project_ugh']=$project_url;
          drupal_goto($path = $destination);
        }else{
          drupal_goto($path = $project_url);
        }
      break;
      //END PROJECT CONTENT TYPE MULTISTEP RULES

      //BEGIN COLLECTION CONTENT TYPE MULTISTEP RULES
      case 'group_edit_collection_properties':
        unset($form['field_email_yet']);
      break;
      case 'group_finalize_collection':
        unset($form['field_title']);
        unset($form['field_collection_url']);
        unset($form['og_group_ref']);
        unset($form['group_content_access']);
        unset($form['field_collection_page_elements']);
        unset($form['field_project_logo_upload']);
        unset($form['field_collection_term_main']);
        unset($form['field_collection_term']);
        unset($form['field_site_collection_vocab_term']);
        unset($form['field_projects_vocab']);
        $node = menu_get_object();$the_url = request_uri();
        $the_url1 = explode('/',$the_url);
        $project_url=$the_url1[1];
        $collection_url=$the_url1[1]."/".$the_url1[2];
        if(isset($_SESSION['redirect_new_collection_to_project_ugh'])){
          $node->status=1;
          _multistep_update_status($node->nid, 'submitted');
          $the_url=$project_url;
        }else{
          _multistep_update_status($node->nid, 'submitted');
          $the_url=$collection_url;
        }
        drupal_goto($path = $the_url);
      break;
      //END COLLECTION CONTENT TYPE MULTISTEP RULES

      //BEGIN TEI CONTENT TYPE MULTISTEP RULES
      case 'group_upload_tei':
        if(isset($_SESSION['batch_remove'])){
          drupal_set_message('<h3>It appears you have a TEI Bulk Upload in progress. Please wait until it is complete before editing or creating other TEI content.</h3><br/><br/><br/>', 'error');
          if($_SESSION['batch_remove']=='process started'){
            unset($_SESSION['batch_remove']);
            //drupal_set_message('batch unset');
          }else{
            $message="Batch process ".$_SESSION['batch_remove']." still in process.";
            drupal_set_message($message, 'error');
          }
          //drupal_goto($_SERVER['HTTP_REFERER']);
        }
        unset($form['field_is_new']);
        unset($form['field_email_yet']);
        unset($form['field-rights-certification']);
        unset($form['field-rights-granted-cc']);
        unset($form['field_dc_coverage_temporal']);
        unset($form['field_title']);
        unset($form['field_dc_contributor']);
        unset($form['field_dc_coverage_spatial_taxono']);
        unset($form['field_dc_coverage_spatial']);
        unset($form['field_dc_coveragetemporal_partia']);
        unset($form['field_has_corporate_author']);
        unset($form['field_author_corporate_dc_creato']);
        unset($form['field__author_last_name_dc_creat']);
        unset($form['field_author_first_name_dc_creat']);
        unset($form['field_dc_creator']);
        unset($form['field_dc_date']);
        unset($form['field_dc_description']);
        unset($form['field_dc_format']);
        unset($form['field_dc_identifier']);
        unset($form['field_dc_language']);
        unset($form['field_dc_publisher']);
        unset($form['field_dc_relation']);
        unset($form['field_dc_rights']);
        unset($form['field_dc_source']);
        unset($form['field_dc_subject_lcsh']);
        unset($form['field_dc_subject']);
        unset($form['field_dc_title']);
        unset($form['field_dc_alternative']);
        unset($form['field_dc_type']);
        unset($form['field_location']);
        unset($form['field_geodata']);
      break;
      case 'group_enter_metadata':
        if(isset($_SESSION['batch_remove'])){
          drupal_set_message('<h3>It appears you have a TEI Bulk Upload in progress. Please wait until it is complete before editing or creating other TEI content.</h3><br/><br/><br/>', 'error');
          if($_SESSION['batch_remove']=='process started'){
            unset($_SESSION['batch_remove']);
            //drupal_set_message('batch unset');
          }else{
            $message="Batch process ".$_SESSION['batch_remove']." still in process.";
            drupal_set_message($message, 'error');
          }
          //drupal_goto($_SERVER['HTTP_REFERER']);
        }
        unset($form['field_tei_xml']);
        unset($form['field_collection_term']);
        unset($form['og_group_ref']);
        $form['#node']->field_extract_metadata['und'][0]['value']=0;
        unset($form['field_is_new']);
        unset($form['field_email_yet']);
      break;
      case 'group_finalize_tei':
        if(isset($_SESSION['batch_remove'])){
          drupal_set_message('<h3>It appears you have a TEI Bulk Upload in progress. Please wait until it is complete before editing or creating other TEI content.</h3><br/><br/><br/>', 'error');
          if($_SESSION['batch_remove']=='process started'){
            unset($_SESSION['batch_remove']);
            //drupal_set_message('batch unset');
          }else{
            $message="Batch process ".$_SESSION['batch_remove']." still in process.";
            drupal_set_message($message, 'error');
          }
          //drupal_goto($_SERVER['HTTP_REFERER']);
        }
        unset($form['field_tei_xml']);
        unset($form['field_collection_term']);
        unset($form['og_group_ref']);
        unset($form['field_dc_date']);
        unset($form['field-rights-certification']);
        unset($form['field-rights-granted-cc']);
        require_once './includes/bootstrap.inc';
        drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
        $node = menu_get_object();
        $nid = $node->nid;
        $is_new_value = $form['#node']->field_is_new['und'][0]['value'];
        if($is_new_value==0){
          $node->field_is_new['und'][0]['value']=1;
          $node->revision = 0;
          $node->revision_operation = 0;
          $collection_status=node_load($node->field_collection_node_reference['und'][0]['target_id']);
          $node->status = $collection_status->status;
          $node->field_extract_metadata['und'][0]['value']=0;
          node_save($node);
        }
        _multistep_update_status($nid, 'submitted');
        drupal_goto($path = 'node/'.$nid);
      break;
      default:
        unset($form['field_tei_xml']);
        unset($form['field_collection_term']);
        unset($form['og_group_ref']);
        unset($form['field_dc_date']);
        unset($form['field-rights-certification']);
        unset($form['field-rights-granted-cc']);
      //END TEI CONTENT TYPE MULTISTEP RULES
    endswitch;
  }
}
//END FORM RULES

/**
* Implementation of hook_node_submit().
*/
function tapas_transform_node_submit($node){
  if ($node->type == 'tei_content') {
    if(isset($node->field_is_new)){
      $has_new = $node->field_is_new['und'][0]['value'];
    }else{
      $has_new=0;
    }
    if($has_new==0){
      $node->revision = 0;
      $node->revision_operation = 0;
    }
    //ANOTHER ANNOYING SIDE EFFECT OF MULTISTEP...MULTIPLE EMAILS DUE TO NODE_SAVE's
    $node->field_email_yet['und'][0]['value'] = 0;
    //LOAD THE NEW FILE TO CHECK FOR ERRORS BEFORE NODE SAVE
    $file=file_load($node->field_tei_xml['und'][0]['fid']);
    $xmlfilename= $file->filename;
    $xmlurl = str_replace("public://", "." . base_path() . conf_path() . "/files/", $file->uri);
    $the_url = request_uri();
    //CHECK FOR ERRORS AND KILL EVERYTHING IF THEY ARE FOUND.. IF BULK UPLOAD HASN'T ALREADY - session set in rules_batch_create_tei_content_from_bulk_upload
if(!isset($_SESSION['file_to_check'][$xmlfilename])){
    $has_error=tapas_file_check($xmlurl,$xmlfilename);
    if($has_error){
      drupal_set_message('The TEI file <em><strong>'.$xmlfilename.'</strong></em> did not validate.<br/>'.$has_error.'<br/>Please verify that your TEI file is proper XML and conforms to TEI Guidelines.<br/><br/><br/>', 'error');
      file_delete($file, $force = FALSE);
      header('Location: '.$the_url);
      die();
    }
}else{
unset($_SESSION['file_to_check'][$xmlfilename]);
}
    //NO ERRORS SAVE THE NODE AND RUN TRANSFORM
    node_save($node);
    $node->revision = 0;
    $node->revision_operation = 0;
    tapas_file_revisions($node);
    tapas_transform($node);
  }
  if ($node->type == 'collection') {
//For some strange reason, if a new collection had all page elements unchecked, the system set the elements back to default. set this session variable and then rules_the_new_empty_field_collection_page_elements_rule. Sorry I did not have time to track this down further...
    unset($_SESSION['empty_field_collection_page_elements_fix']);
    if (empty($node->field_collection_page_elements['und'])) {
      $_SESSION['empty_field_collection_page_elements_fix']=1;
    }
//This is here to prevent multiple emails due to multistep module
    $node->field_email_yet['und'][0]['value'] = 0;
  }
}
function tapas_file_xsl_check($xml_filename,$validation_filename) {
    $xslDoc = new DOMDocument();
    $xslDoc->resolveExternals = TRUE;
    $xslDoc->substituteEntities = TRUE;
    $xslDoc->load($validation_filename);
    $xmlDoc = new DOMDocument();
    $xmlDoc->load($xml_filename);
    $proc = new XSLTProcessor();
    $proc->importStylesheet($xslDoc);
    $doc = new DOMDocument();
    unset($the_error);
    $the_error=$proc->transformToXML($xmlDoc);
    return $the_error;
}
//TEST FILE FOR ERRORS. run from tapas_transform_node_submit() or tei bulk upload from rule rules_batch_create_tei_content_from_bulk_upload
function tapas_file_check($xmlurl,$xmlfilename) {
  //CHECK TO MAKE SURE FILENAME DOES NOT CONFLICT WITH DRUPAL'S FILE REVISION NAMING CONVENTIONS
  if(preg_match('/_[0-9]*\.xml/',$xmlurl,$matches)){
    $the_error='Filenames with a _[#].[file-extension] (an underscore followed by a number before the file extension), are reserved for file revisions. Please rename your file by adding a letter after the underscore or replacing the underscore with a dash.';
    return $the_error;
  }
  //LOAD AND VALIDATE XML FILE FOR WELL FORMEDNESS WITH relaxNG AND libxml2
  libxml_clear_errors();
  libxml_use_internal_errors(true);
  $xml_TEST = new DOMDocument();
  $xml_TEST->load($xmlurl);
  $well_formed_rng='./'.drupal_get_path('module', 'tapas_transform').'/validation/well-formed.rng';
  if($xml_TEST->relaxNGValidate($well_formed_rng)){
  //THE FILE PASSED TEST ONE
    //NOW BLEND THE FILE WITH A SCHEMATRON1.5 BLEND of http://xml.ascc.net/schematron/1.5/skeleton1-5.xsl and SYD's isTEI.sch CALLED isTEI.xsl. THIS SHOULD BE PRE-GENERATED SO WE DONT HAVE TO GENERATE IT EVERY TIME!
    $xml_filename=str_replace('./sites', DRUPAL_ROOT.'/sites', $xmlurl);
    $validation_filename=DRUPAL_ROOT.'/'.drupal_get_path('module', 'tapas_transform').'/validation/isTEI.xsl';
    $the_error=tapas_file_xsl_check($xml_filename,$validation_filename);
    //IF THERE IS AN ERROR, RETURN IT.
    if($the_error!=''){
      //CHECK FOR WARNINGS
      if(strpos($the_error,'fatal') !== false || strpos($has_error,'error') !== false){
        //FILE FAILED TEST TWO
//        drupal_set_message("There is a validation error on step isTEI for file ".$xmlfilename, error);
        return $the_error;
      }else{
        $has_error='The TEI file <em><strong>'.$xmlfilename.'</strong></em> validated but contains the following warnings:<br/>'.$the_error.'<br/>which occur on validation step isTEI. Please verify that your TEI file is proper XML and conforms to TEI Guidelines.<br/><br/><br/>';
        drupal_set_message($has_error,warning);
      }
    }else{
      for ($numofchecks=2; $numofchecks<=10; $numofchecks++) {
        $xml_filename=str_replace('./sites', DRUPAL_ROOT.'/sites', $xmlurl);
        $num=sprintf("%02d", $numofchecks);
        $check_num='/validation/tapasCheck'.$num.'.xsl';
        $validation_filename=DRUPAL_ROOT.'/'.drupal_get_path('module', 'tapas_transform').$check_num;
        $the_error=tapas_file_xsl_check($xml_filename,$validation_filename);
        //IF THERE IS AN ERROR, RETURN IT.
/*
if(strpos($validation_filename,'tapasCheck09') !== false){
echo $validation_filename;
exit(print_r($the_error));
}
*/
        if($the_error!=''){
          //CHECK FOR WARNINGS
          if(strpos($the_error,'fatal') !== false || strpos($has_error,'error') !== false){
            //FILE FAILED TEST $numofchecks
//            drupal_set_message("There is a validation error on step ".$numofchecks." for file ".$xmlfilename, error);
            return $the_error;
          }else{
            $has_error='The TEI file <em><strong>'.$xmlfilename.'</strong></em> validated but contains the following warnings:<br/>'.$the_error.'<br/>which occur on validation step '.$numofchecks.'. Please verify that your TEI file is proper XML and conforms to TEI Guidelines.<br/><br/><br/>';
            drupal_set_message($has_error,warning);
          }
        }else{
//          drupal_set_message("Validation passed step ".$numofchecks." for file ".$xmlfilename);
        }
      }
    }
  }else{
    //THE FILE FAILED TEST ONE
    unset($the_error);
    $the_error=libxml_display_errors();
    return $the_error;
  }
}

//ADDED from http://www.ibm.com/developerworks/xml/library/x-validxphp/index.html?ca=drs
function libxml_display_error($error) {
  $return = "<br/>\n"; 
  switch ($error->level) { 
    case LIBXML_ERR_WARNING: 
      //removed warnings at Syd's request
      //      $return .= "<b>Warning $error->code</b>: "; 
      return;
      break; 
  case LIBXML_ERR_ERROR: 
    //error 6 issues with bulk upload - "Error 6: Internal error: no state on line 0".
    // happened in conjunction with "Warning: invalid name prefix
    // 'xml'". Not sure what these were about but don't cause
    // problems. Bypassing...
    if($error->code==6){
      return;
    }else{
      $return .= "<b>Error $error->code</b>: "; 
    }
    break; 
  case LIBXML_ERR_FATAL: 
      $return .= "<b>Fatal Error $error->code</b>: "; 
      break; 
  } 
  $return .= trim($error->message); 
  if ($error->file) { 
    $error->file = substr(strrchr($error->file, "/"), 1);
    $return .= " in <b>$error->file</b>"; 
  } 
  $return .= " on line <b>$error->line</b>\n"; 
  return $return; 
}

function libxml_display_errors(){
  $errors = libxml_get_errors();
  $all_errors="";
  foreach ($errors as $error) { 
    $all_errors.=libxml_display_error($error); 
  }
  return $all_errors;
  libxml_clear_errors(); 
}
//END

/**
* Implementation of hook_file_update()
* Hook function copied from upload_replace module - http://drupal.org/project/upload_replace. Since using context to do file revisions, easier to maintain code here.
*/
function tapas_transform_file_update($new_file) {
  if (!$new_file->fid) {
    //Nothing to do if no fileid
    return;
  }
if(preg_match('/_[0-9]*\.xml/',$new_file->uri,$matches) && isset($_SESSION['batch_remove'])){
return;
}else{
  $file_is_new=0;
  if(strpos($new_file->uri,'Create TEI Content Record')){
    $file_is_new=1;
  }
  $desired_destination = preg_replace('/_[0-9]+\.(.*)$/', '.$1', $new_file->uri);
  context_delete('file_updating', 'desired_destination');
  context_set('file_updating', 'desired_destination', $desired_destination);
  $db_path = db_select('file_managed', 'f')
    ->fields('f', array('uri', ))
    ->condition('fid', $new_file->fid)
    ->execute()
    ->fetchField();
  if ($db_path != $new_file->uri) {
    //this happens when a reversion is being reverted
    $next_good_filepath = file_destination($desired_destination, FILE_EXISTS_RENAME);
    db_update('file_managed')
      ->fields(array('uri' => $next_good_filepath))
      ->condition('fid', $new_file->fid)
      ->execute();
    $new_file->uri = $desired_destination;
  }else{
    //If the filename has be modified by adding a _0 value, or
    //on certain situations the filepath will not match the filepath in the db, such as
    //when reverting a revision.  When reverting a revision change the filename as well
    if (!strpos($new_file->uri, $new_file->uri)) {
      //the filename is not in the filepath, so drupal must have added a "_0" before the extension
      //find the file that is blocking this file from keeping the correct path
      $result = db_select('file_managed', 'f')
        ->fields('f')
        ->condition('uri', $desired_destination)
        ->execute();
      //@todo only one result is handled, should allow for multiple results
      $is_blocked = false;
      
      foreach ($result as $file) {
        $is_blocked = TRUE;
        $blocking_file = $file;
        $tmp_destination = file_directory_temp()."/test_-".$blocking_file->fid."_-".$blocking_file->filename."";
        context_delete('we_r_done', 'fid', $blocking_file->fid);
      }
      $old_destination = $db_path;
      if ($old_destination == $desired_destination){
        return;
      }
      //Swap the files
      if ($is_blocked) {
        //move the blocking file to a temporary location
        if (!file_unmanaged_move($desired_destination, $tmp_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $desired_destination, '%new' => $tmp_destination)), 'error');
          return;
        }
        //DRUPAL 7 no longer changes the source filepath during move
        //move blocking file was successful, update the DB
        db_update('file_managed')
          ->fields(array('uri' => $tmp_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }
//NEW FILE IS _0 here. OLD FILE IS IN TMP DIR
      //move the newfile to the prefered location
      if (!file_unmanaged_move($old_destination, $desired_destination)) {
        drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $old_destination, '%new' => $desired_destination)), 'error');
        return;
      }
      //move newfile was successful, update the DB
      db_update('file_managed')
        ->fields(array('uri' => $desired_destination))
        ->condition('fid', $new_file->fid)
        ->execute();
//NEW FILE IS IN PLACE. OLD FILE IS IN TMP DIR WITHOUT A _0
      $new_file->uri = $desired_destination;//set the newfile's path to the correct path
      if ($is_blocked) {
        //move the older file from temp to the new _0 location
        if (!file_unmanaged_move($tmp_destination, $old_destination)) {
          drupal_set_message(t('The file %old could not be moved to %new', array('%old' => $tmp_destination, '%new' => $old_destination)), 'error');
          return;
        }
//NEW AND OLD FILES ARE NOW IN PLACE. DB UPDATE FOR OLD FILE NEEDED
        //move blocking file was successful, update the DB with the actual location after file copy, so we use tmp_destination as it was updated during the move
        db_update('file_managed')
          ->fields(array('uri' => $old_destination))
          ->condition('fid', $blocking_file->fid)
          ->execute();
      }
    }
    //THIS IS ADDED TO upload_replace AND USED TO MANAGE FILE REVISIONS VIA tapas_file_revisons() BELOW
    $desired_destination_path=pathinfo($desired_destination);
    $desired_destination_path_extension=$desired_destination_path['extension'];
    if($old_destination_path=pathinfo($old_destination)){
      $old_destination_path_extension=$old_destination_path['extension'];
      if ($desired_destination_path_extension == 'xml' || $desired_destination_path_extension == 'tei' && $old_destination_path_extension == 'xml' || $old_destination_path_extension == 'tei'){
        context_set('new_xml_uri', 'new_xml', $desired_destination);
        context_set('old_xml_uri', 'old_xml', $old_destination);
      }
      if ($desired_destination_path_extension == 'xsl' || $desired_destination_path_extension == 'xslt' && $old_destination_path_extension == 'xsl' || $old_destination_path_extension == 'xslt'){
        context_set('new_xsl_uri', 'new_xsl', $desired_destination);
        context_set('old_xsl_uri', 'old_xsl', $old_destination);
      }
    }
  }
  //ALL IS WELL AT THIS POINT. SOMETHING BAD HAPPENS BETWEEN HERE AND tapas_file_revisions following 7.24 upgrade so need to set a context used in includes/file.inc. Not pleased about this at all.
  if(!$file_is_new && isset($blocking_file)){
    context_set('we_r_done', 'fid', $blocking_file->fid);
  }
}
}

function make_transform($xsl,$xml,$extension=NULL){
  if($extension===NULL){
	  $extension='xml';
  }
  //get project directory name 
  $xmlpath = pathinfo($xml);
  $xslpath = pathinfo($xsl);
  $newdirname = ltrim($xmlpath['dirname'],".");
  $xmlfilename=$xmlpath['basename'];
  $xslfilename=$xslpath['basename'];
  //create transform filename
  $files = DRUPAL_ROOT;
  $filename = $xmlfilename . "-" . $xslfilename;
  $dirtosave = $files . $newdirname."/";
  $finalfile = $dirtosave . $filename . ".".$extension;
  //Make the transform and save to the tmp directory
  $xslDoc = new DOMDocument();
  $xslDoc->resolveExternals = TRUE;
  $xslDoc->substituteEntities = TRUE;
  $xslDoc->load($xsl);
  $xmlDoc = new DOMDocument();
  $xmlDoc->load($xml);
  $proc = new XSLTProcessor();
  $proc->importStylesheet($xslDoc);
  $doc = new DOMDocument();
  $doc->loadXML($proc->transformToXML($xmlDoc));
  //save the file
  $finalfile_tmp=file_directory_temp(). "/" . $filename .'.'. $extension;
  $doc->save($finalfile_tmp);
  rename($finalfile_tmp, $finalfile);
  $values_to_send=array(
    "finalfile" => str_replace(DRUPAL_ROOT,'.',$finalfile),
    "filename" => $filename,
  );
  return $values_to_send;
}

//Main Transform function
function tapas_transform($node) {
  $xmlfile= field_get_items('node', $node, 'field_tei_xml');
  if($xmlfile){
    //get drupal paths
    $base = base_path();
    $files = conf_path() .  "/files/";
    //Get the xml filename to create unique directories and transformations
    $xmlfilename= $xmlfile[0]['filename'];
    $xmlurl= $xmlfile[0]['uri'];
    $xmlurl = str_replace("public://", "", $xmlurl);
    $xmlurl= "." . $base . $files . $xmlurl;
    //Save the file to a link field 
    $node->field_tei_xml_link['und'][0]['url'] = $xmlurl;
    $node->field_tei_xml_link['und'][0]['title'] = $xmlfilename;

    //create transforms
//NOTE THAT AN OLDER VERSION OF THIS MODULE STORED TRANSFORMS IN '/sites/default/files/transforms/[tapas|teibp]/[filename]'. AS THE PATH NEEDS HARDCODING IN THE .xsl FILES, FILES UPLOADED PRIOR TO 3/2014 USE THIS PATH FOR CSS AND JS FILES

    $tapas_xsl_url=drupal_get_path('module', 'tapas_transform').'/transforms/';
    $tapas_xslfilename1=$tapas_xsl_url."teibp/teibp.xsl";
    $filetosave=make_transform($tapas_xslfilename1,$xmlurl);
    //Save the final path address to drupal field 
    $node->field_transform_address_link['und'][0]['url'] = $filetosave['finalfile'];
    $node->field_transform_address_link['und'][0]['title'] = $filetosave['filename'] . '.xml';

//NOTE THAT THIS HAS BEEN REPLACED BY 'tfc.xsl'. THIS IS STILL HERE AS A PLACEHOLDER WHILE AWAITING MORE TRANSFORMATIONS(perhaps?). IT IS BEING GENERATED AS A PLACEHOLDER IN THE READING VIEW (/[project-url]/[node-title]/[node-nid]) as well
    $tapas_xslfilename2=$tapas_xsl_url."tapas/teiHeader2dc1.xsl";
    $filetosave=make_transform($tapas_xslfilename2,$xmlurl);
    //Save the final path address to drupal field 
    $node->field_tei_transform_address_link['und'][0]['url'] = $filetosave['finalfile'];
    $node->field_tei_transform_address_link['und'][0]['title'] = $filetosave['filename'] . '.xml';

    $tapas_xslfilename3=$tapas_xsl_url."tapas/tfc.xsl";
    $filetosave=make_transform($tapas_xslfilename3,$xmlurl);
    //Save the final path address to drupal field 
    $node->field_tei_tranform_link_in2tfc_s['und'][0]['url'] = $filetosave['finalfile'];
    $node->field_tei_tranform_link_in2tfc_s['und'][0]['title'] = $filetosave['filename'] . '.xml';

    //to send dc extractions to drupal metadata collection
    $finalfile=$filetosave['finalfile'];
    $is_new=0;
    if(!isset($node->field_dc_title)){
      $is_new=1;
    }
    if($is_new!=1){
      $node->field_email_yet['und'][0]['value'] = 1;
    }
    if($node->field_extract_metadata['und'][0]['value']==1){
      tapas_set_metadata($node, $finalfile);
    }
    //NOW TAKE THE FILE GENERATED FROM tfc.xsl AND GENERATE THE FINAL FILE WITH MULTIPLE XSL PASSES!
      $xmlfinalfilename[0]= $filetosave['filename'];
      $xmlfinalurl[0]= $filetosave['finalfile'];
      $xmlfinalurl[0] = str_replace("public://", "", $xmlfinalurl[0]);
      // $base and $files already in address
      //SYD - YOU CAN CHANGE THIS LINE TO ADD AS MANY h[x].xsl FILES AS YOU NEED!
      for ($numoftransforms=1; $numoftransforms<=5; $numoftransforms++) {
        $uselastxmlfile=$numoftransforms - 1;
        $tapas_xslfilename[$numoftransforms]=$tapas_xsl_url."tapas/h".$numoftransforms.".xsl";
        $filetosave1[$numoftransforms]=make_transform($tapas_xslfilename[$numoftransforms],$xmlfinalurl[$uselastxmlfile],'xhtml');
        $xmlfinalfilename[$numoftransforms]= $filetosave1[$numoftransforms]['filename'];
        $xmlfinalurl[$numoftransforms]= $filetosave1[$numoftransforms]['finalfile'];
	// drupal_set_message('pass '.$numoftransforms." filename: ".$xmlfinalfilename[$numoftransforms]." url: ".$xmlfinalurl[$numoftransforms]);
      }
      $node->field_tei_custom_transform_addre['und'][0]['url'] = end($xmlfinalurl);
      $node->field_tei_custom_transform_addre['und'][0]['title'] = end($xmlfinalfilename). '.xhtml';
      //drupal_set_message('finalurl: '.$node->field_tei_custom_transform_addre['und'][0]['url']);
      //drupal_set_message('finalfilename: '.$node->field_tei_custom_transform_addre['und'][0]['title']);
      //SAVE THE NODE. FINALLY DONE
      $node->revision = 0;
      $node->revision_operation = 0;
      node_save($node);
  }
}

function tapas_reset_metadata($node){
  $node->field_author_first_name_dc_creat = NULL;
  $node->field_author_last_name_dc_creat = NULL;
  $node->field_author = NULL;
  $node->field_author_taxonomy = NULL;
  $node->field_dc_creator = NULL;
  $node->field_language_dc_language = NULL;
  $node->field_dc_contributor = NULL;
}

function tapas_set_metadata($node, $finalfile) {
  $xml = simplexml_load_file($finalfile);
  tapas_reset_metadata($node);

  //Set Title
  $title = $xml->xpath("tapas_metadata/dc_title");
  $title = (string) $title[0];
  if ($title){
    if (strlen ($title)>255){
      $title = substr($title,0,252).'...';
    }
    $node->field_dc_title['und'][0]['value'] = $title;
  } else {
    $node->field_dc_title['und'][0]['value'] = "Please give your TEI file a valid title and reupload the file.";
  }

  //Set Rights
  $rights = $xml->xpath("tapas_metadata/dc_rights");
  if(isset($rights[0])){
    $rights = (string) $rights[0];
  }else{
    $rights = (string) $rights;
    if($rights=='Array'){
      $rights='';
    }
  }
  if ($rights){
    $node->field_dc_rights['und'][0]['value'] = $rights;
  }

  //Set Source
  $source = $xml->xpath("tapas_metadata/dc_source");
  $source = (string) $source[0];
  if ($source){
    $node->field_dc_source_full_text['und'][0]['value'] = $source;
  }

  //Set Language
  $language = $xml->xpath("tapas_metadata/dc_language");
  if(isset($language[0])){
    $language = (string) $language[0];
    $language = substr($language,0,3);
    if(!preg_match('/[a-z][a-z][a-z]/', $language)){
      $language = substr($language,0,2);
    }
    $node->field_dc_language_text_field['und'][0]['value'] = $language;
  }

  //Set Publish Date
  $date = $xml->xpath("tapas_metadata/dc_date");
  if(isset($date[0])){
    $date = (string) $date[0];
$months = array(01=>'January',02=>'February',03=>'March',04=>'April',05=>'May',06=>'June',07=>'July',08=>'August',09=>'September',10=>'October',11=>'November',12=>'December',);
foreach ($months as $key => $themonth) {
$check_month = strpos($date,$themonth);
//echo $check_month;
if($check_month !== false){
//echo $check_month;
//echo $month;
//echo $key;
  $date=str_replace($themonth,$key.'-',$date);
  $date=str_replace(", ","-",$date);
}
}
//exit($date);
    $date=preg_replace("/[^0-9-]/", "", $date);
    $date=explode("-",$date);
if(preg_match('/[0-9][0-9][0-9][0-9]/', $date[0])){
$year=$date[0];
if(isset($date[1])){
$month=$date[1];
}
if(isset($date[2])){
$day=$date[2];
}
}elseif(preg_match('/[0-9][0-9][0-9][0-9]/', $date[2])){
$year=$date[2];
if(isset($date[0])){
$month=$date[0];
}
if(isset($date[1])){
$day=$date[1];
}
}elseif(preg_match('/[0-9][0-9][0-9][0-9]/', $date[1])){
$year=$date[1];
if(isset($date[0])){
$month=$date[0];
}
}
//echo "1".$month;
if(isset($year)){
    if(!isset($month)){
      $month="01";
    }
    if(!isset($day)){
      $day="01";
    }
}
//echo "2".$month;
$month = sprintf("%02s", $month);
$day = sprintf("%02s", $day);
//echo "3".$month;
    $date=$year."-".$month."-".$day;
//exit($date);
//IMPORTANT. NEED TO CHECK FOR VALID datetime FORMAT HERE. OTHERWISE BAD MYSQL ERROR
    if(preg_match('/^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$/', $date)){
		$date=$date." 00:00:00";
      $node->field_dc_date['und'][0]['value'] = $date;
    }else{
      //exit(print_r($node->field_tei_xml['filename']));
      drupal_set_message(t('The publication date in your TEI file <strong>'.$node->field_tei_xml['und'][0]['filename'].'</strong> could not be properly extracted or converted - yyyy-mm-dd needed. Received '.$date.'<br/>'), warning);
    }
  }

  //Set Contributors
  $contributor = $xml->xpath("tapas_metadata/dc_contributor");
  if(isset($contributor)){
    $i=0;
    foreach($contributor as $value){
      $node->field_dc_contributor['und'][$i]['value'] = $value;
      $i++;
    }
  }

  //Set Author/Creator
//NOTE: I am sure there is a more efficient way to accomplish this (multiple functions at the least)...and this may not even cover every way someone enters an author name. sigh.
  $creator_full = $xml->xpath("tapas_metadata/dc_creator");
  if(isset($creator_full)){
    $i=0;
    $creator = '';
    foreach($creator_full as $value){
      $creator = (string) $value[$i];
      if($creator!=''){
        $creator_first_name='';
        $creator_last_name='';
        $creator_middle_name='';
        $creator_generational='';
        $creator_title='';
        if(strpos($creator,' and ')){
          $creator_parse=$creator;
          $creator_parse=explode(" and ",$creator_parse);
          $j=0;
          foreach($creator_parse as $creator){
            if(strpos($creator,',')){
              $creator=explode(", ",$creator);
              $creator_last_name = array_shift($creator);
              $creator = $creator[0];
              $creator=explode(" ",$creator);
              $creator_first_name=array_shift($creator);
              if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
                $creator_title=array_shift($creator);
                $creator_first_name=array_shift($creator);
              }
              foreach($creator as $value){
                if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
                  $creator_generational=$value;
                }else{
                  $creator_middle_name=$creator_middle_name.$value." ";
                }
              }
            }else{
              $creator=explode(" ",$creator);
              $name_count=count($creator);
              if($name_count!=2){
                $creator_last_name = array_pop($creator);
                $creator_first_name=array_shift($creator);
                if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
                  $creator_title=array_shift($creator);
                  $creator_first_name=array_shift($creator);
                }
                foreach($creator as $value){
                  if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
                    $creator_generational=$value;
                  }else{
                    $creator_middle_name=$creator_middle_name.$value." ";
                  }
                }
              }else{
                $creator_first_name=$creator[0];
                $creator_last_name=$creator[1];
              }
            }
            if(isset($creator_title) && $creator_title!=''){
              $node->field_author['und'][$j]['title'] = $creator_title;
            }
            if(isset($creator_first_name) && $creator_first_name!=''){
              $node->field_author['und'][$j]['given'] = $creator_first_name;
            }
            if(isset($creator_last_name) && $creator_last_name!=''){
              $node->field_author['und'][$j]['family'] = $creator_last_name;
            }
            if(isset($creator_middle_name) && $creator_middle_name!=''){
              $node->field_author['und'][$j]['middle'] = $creator_middle_name;
            }
            if(isset($creator_generational) && $creator_generational!=''){
              $node->field_author['und'][$j]['generational'] = $creator_generational;
            }
            $j++;
          }
        }else{
          if(strpos($creator,',')){
            $creator=explode(", ",$creator);
            $creator_last_name = array_shift($creator);
            $creator = $creator[0];
            $creator=explode(" ",$creator);
            $creator_first_name=array_shift($creator);
            if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
              $creator_title=array_shift($creator);
              $creator_first_name=array_shift($creator);
            }
            foreach($creator as $value){
              if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
                $creator_generational=$value;
              }else{
                $creator_middle_name=$creator_middle_name.$value." ";
              }
            }
          }else{
            $creator=explode(" ",$creator);
            $name_count=count($creator);
            if($name_count!=2){
              $creator_last_name = array_pop($creator);
              $creator_first_name=array_shift($creator);
              if($creator_first_name=='Mr.'||$creator_first_name=='Mrs.'||$creator_first_name=='Miss'||$creator_first_name=='Ms.'||$creator_first_name=='Dr.'||$creator_first_name=='Prof.'||$creator_first_name=='Sir'||$creator_first_name=='Lord'||$creator_first_name=='Lady'||$creator_first_name=='The Honorable'){
                $creator_title=array_shift($creator);
                $creator_first_name=array_shift($creator);
              }
              foreach($creator as $value){
                if($value=='Jr.' || $value=='Sr.' || $value=='I' || $value=='II' || $value=='III' || $value=='IV' || $value=='V' || $value=='VI' || $value=='VII' || $value=='VIII' || $value=='IX' || $value=='X'){
                  $creator_generational=$value;
                }else{
                  $creator_middle_name=$creator_middle_name.$value." ";
                }
              }
            }else{
              $creator_first_name=$creator[0];
              $creator_last_name=$creator[1];
            }
          }
          if(isset($creator_title) && $creator_title!=''){
            $node->field_author['und'][$i]['title'] = $creator_title;
          }
          if(isset($creator_first_name) && $creator_first_name!=''){
            $node->field_author['und'][$i]['given'] = $creator_first_name;
          }
          if(isset($creator_last_name) && $creator_last_name!=''){
            $node->field_author['und'][$i]['family'] = $creator_last_name;
          }
          if(isset($creator_middle_name) && $creator_middle_name!=''){
            $node->field_author['und'][$i]['middle'] = $creator_middle_name;
          }
          if(isset($creator_generational) && $creator_generational!=''){
            $node->field_author['und'][$i]['generational'] = $creator_generational;
          }
        }
      }
      $i++;
    }
  }
}

function tapas_file_revisions($node) {
  if (context_isset('new_xml_uri', 'new_xml') && context_isset('old_xml_uri', 'old_xml')){
    $xml_context_new = context_get('new_xml_uri', 'new_xml');
    $xml_context_archive = context_get('old_xml_uri', 'old_xml');
    //get drupal paths
    $files = conf_path() .  "/files/";
    $xml_context_archive_url = str_replace("public://", "", $xml_context_archive);
    $xml_context_archive_url= $files . $xml_context_archive_url;
    $xml_context_new_url = str_replace("public://", "", $xml_context_new);
    $xml_context_new_url= $files . $xml_context_new_url;
    //Check for previous filepaths in drupal array
    $tei_xml_revisions_link = field_get_items('node', $node, 'field_tei_xml_revisions_link');
    $numofteixmlrevfilepathlinks=count($tei_xml_revisions_link);
    if(!$tei_xml_revisions_link){
      $numofteixmlrevfilepathlinks="0";
    }
    $numofteixmlrevs=$numofteixmlrevfilepathlinks + 1;
    //Get the filepath for title
    $xml_context_archive_path=pathinfo($xml_context_archive_url);
    $xml_context_archive_filename=$xml_context_archive_path['basename'];
    $node->field_tei_xml_revisions_link['und'][$numofteixmlrevfilepathlinks]['url'] = $xml_context_archive_url;
    $node->field_tei_xml_revisions_link['und'][$numofteixmlrevfilepathlinks]['title'] = " Revison " . $numofteixmlrevs . " - " . $xml_context_archive_filename;
  }
  if (context_isset('new_xsl_uri', 'new_xsl') && context_isset('old_xsl_uri', 'old_xsl')){
    $xsl_context_new = context_get('new_xsl_uri', 'new_xsl');
    $xsl_context_archive = context_get('old_xsl_uri', 'old_xsl');
    $files = conf_path() .  "/files/";
    $xsl_context_archive_url = str_replace("public://", "", $xsl_context_archive);
    $xsl_context_archive_url= $base . $files . $xsl_context_archive_url;
    $xsl_context_new_url = str_replace("public://", "", $xsl_context_new);
    $xsl_context_new_url= $base . $files . $xsl_context_new_url;
    $new_xsl_contents=file_get_contents("./" . $xsl_context_new_url);
    //Check for previous filepaths in drupal array
    $tei_xsl_revisions_link = field_get_items('node', $node, 'field_tei_xsl_revisions_link');
    $numofteixslrevfilepathlinks=count($tei_xsl_revisions_link);
    if(!$tei_xsl_revisions_link){
      $numofteixslrevfilepathlinks="0";
    }
    $numofteixslrevs=$numofteixslrevfilepathlinks + 1;
    //Get the filepath for title
    $xsl_context_archive_path=pathinfo($xsl_context_archive_url);
    $xsl_context_archive_filename=$xsl_context_archive_path[basename];
    $node->field_tei_xsl_revisions_link['und'][$numofteixslrevfilepathlinks]['url'] = $xsl_context_archive_url;
    $node->field_tei_xsl_revisions_link['und'][$numofteixslrevfilepathlinks]['title'] = $xsl_context_archive_filename . " Revison " . $numofteixslrevs;
  }
}

/**
 * Implements hook_node_update().
 *
 * Delete files from old node revisions.
 //ADDED so files overwrite each other in fields field_support_file and field_tei_images
 */
function tapas_transform_node_update($node) {
  // Array of content types to act on.
  if (in_array($node->type, array('tei_content', 'support_files_xslt_rnc_etc_'))) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $original_wrapper = entity_metadata_wrapper('node', $node->original);

    // Array of file fields to act on.
    foreach (array('field_support_file', 'field_tei_images') as $field) {
      if (!isset($original_wrapper->{$field})) {
        continue;
      }
      $current_files = array();
      $original_files = array();
      // Get files that were attached to the original node (before update).
      foreach ($original_wrapper->{$field}->value() as $file) {
        $original_files[] = $file['fid'];
      }
      // Stop if there were no files previously attached.
      if (empty($original_files)) {
        continue;
      }
      // Get files currently attached to the node (after update).
      foreach ($wrapper->{$field}->value() as $file) {
        $current_files[] = $file['fid'];
      }
      // Delete files that were in the original node but were removed during
      // this update.
      $deleted_files = array_diff($original_files, $current_files);
      foreach ($deleted_files as $fid) {
        if ($file = file_load($fid)) {
          // Delete all usages of the file. Each node revision adds to the usage
          // count.
          file_usage_delete($file, 'file', 'node', $node->nid, 0);
          file_delete($file);
        }
      }
    }
  }
}

/**
*VBO HOOKS TO RUN tapas_transform WHEN REFRESH NEEDED
*/
function tapas_transform_action_info() {
  return array(
    'tapas_transform_run_check_and_transform' => array(
      'type' => 'node',
      'label' => t('TAPAS - Run check and update transform files'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'tapas_transform_run_transform' => array(
      'type' => 'node',
      'label' => t('TAPAS - Update transform files only'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function tapas_transform_run_check_and_transform(&$node, $context) {
  tapas_transform_node_submit($node);
}
function tapas_transform_run_transform(&$node, $context) {
  tapas_transform($node);
}